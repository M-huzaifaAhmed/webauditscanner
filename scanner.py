from flask import Flask, request, jsonify
import requests
from bs4 import BeautifulSoup
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
import time
import os

app = Flask(__name__)

@app.route("/")
def index():
    return "WebAuditPro is running!"

@app.route("/scan", methods=["POST"])
def scan():
    data = request.json
    url = data.get("url")

    if not url:
        return jsonify({"error": "No URL provided"}), 400

    result = {
        "url": url,
        "sqli": "Secure",
        "xss": "Secure",
        "headers": {},
    }

    try:
        r = requests.get(url)
        soup = BeautifulSoup(r.text, "html.parser")

        if "<script>" in r.text.lower():
            result["xss"] = "Vulnerable"

        if "sql" in r.text.lower() or "mysql" in r.text.lower():
            result["sqli"] = "Vulnerable"

        result["headers"] = dict(r.headers)

        # ✅ Change PDF path to temporary folder in Render environment
        pdf_dir = "/tmp"
        os.makedirs(pdf_dir, exist_ok=True)
        report_name = f"scan_report_{int(time.time())}.pdf"
        report_path = os.path.join(pdf_dir, report_name)

        c = canvas.Canvas(report_path, pagesize=A4)
        width, height = A4
        c.setFont("Helvetica-Bold", 20)
        c.setFillColor(colors.darkblue)
        c.drawCentredString(width / 2, height - 60, "WebAuditPro Security Report")

        c.setFont("Helvetica", 12)
        c.setFillColor(colors.black)
        c.drawCentredString(width / 2, height - 85, f"URL Scanned: {url}")
        c.line(50, height - 95, width - 50, height - 95)

        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, height - 130, "Scan Results:")
        c.setFont("Helvetica", 12)
        c.drawString(60, height - 155, f"• SQL Injection: {result['sqli']}")
        c.drawString(60, height - 175, f"• Cross-site Scripting (XSS): {result['xss']}")

        c.setFont("Helvetica-Bold", 14)
        c.drawString(50, height - 210, "HTTP Headers:")
        c.setFont("Helvetica", 11)
        y = height - 230
        for key, val in result["headers"].items():
            if y < 100:
                c.showPage()
                y = height - 50
                c.setFont("Helvetica", 11)
            c.drawString(60, y, f"{key}: {val}")
            y -= 15

        c.setFont("Helvetica-Oblique", 10)
        c.drawString(50, 30, f"Generated by WebAuditPro on {time.ctime()}")
        c.save()

        result["pdf_report"] = report_name
        return jsonify(result)

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Needed for gunicorn
if __name__ != "__main__":
    application = app
